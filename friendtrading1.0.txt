pragma solidity ^0.4.20;
contract FriendTrading {
    
    event NewCharacter(uint userID,string name,string introduction,uint balance,uint[] slavesID,bool available,uint masterID,uint value);
    
    struct User{
        address addr;
        //string id;                               
        string introduction; //
        uint balance;
        uint[] slavesID;
        //for character
        //string id;
                string name;        
        bool available; //SendToWork
        uint masterID;
        uint value; 
    }
    
        uint userID = 10000000;
    mapping(uint => User[]) public users;


    //add new user
    function createCharacter(string _name, string _introduction){
        users[userID++].push(User({
                        address: msg.sender,
                        introduction: _introduction,
                        balance: 1000,
                        slavesID: new uint[](0),
                        name: _name,
                        available: False,
                        masterID: new uint, //
                        value: 50
                }));
                NewCharacter(userID,_name,_introduction,balance,slavesID,available,masterID,value);
        }


// but friend!
function buyFriend(uint _buyerID, unit _slaveID) payable {
    //gas!
    unit price = _slaveId.value;
    require(_buyerID.addr == msg.sender);
    require(_buyerID.balance>price);
    require(msg.value>price);
    if (_slaveID. masterID == 0){
        _buyerID.balance - = price;
        
    }
    else{
        required(available == True);
        per_master = _buyerID.masterID;
        //transfer money
        per_master.addr.transfer(price *3/4);
        _slaveID.addr.transfer(price/4);
        //delete slavesID
        uint[]  per_slave = per_master.slavesID;
        per_master.slavesID = remove(per_slave,_slaveID);
        
    }
    //slave
    _slaveID.masterID = _buyerID;
    _slaveID.available = true;
    _slaveID.value += 20;
    //maser
    _buyerID.slavesID.push(_slaveID);
    // _buyerID.balance -= price;
    
}
     //delete Slave from slave’ former maser’ slavesID
    function remove(uint[] array,uint _slaveID)  returns(uint[]) {
        uint index;
        for (uint i =0, i<array.length,i++){
            if(array[i]==_slaveID){
                index = i;
            }
        }
        
        if (index >= array.length || index ==0) return;


        for (uint j = index; j<array.length-1; j++){
            array[j] = array[j+1];
        }
        delete array[array.length-1];
        array.length--;
        return array;
    }